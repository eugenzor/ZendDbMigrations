<?php
/**
 * Zend Framework (http://framework.zend.com/)
 *
 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
 * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace Cli\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Zend\Console\Request as ConsoleRequest;

class IndexController extends AbstractActionController
{
    public function indexAction()
    {
        return new ViewModel();
    }

    public function generateModelsAction()
    {
        $request = $this->getRequest();

        // Make sure that we are running in a console and the user has not tricked our
        // application into running this action from a public web server.
        if (!$request instanceof ConsoleRequest){
            throw new \RuntimeException('You can only use this action from a console!');
        }
        $baseNamespace   = $request->getParam('namespace');


        $manager = $this->getEvent()->getApplication()->getServiceManager()->get('view_manager');
        $renderer = $manager->getRenderer();
        $resolver = $renderer->resolver();

        $adapter = \Zend\Db\TableGateway\Feature\GlobalAdapterFeature::getStaticAdapter();
        $metadata = new \Zend\Db\Metadata\Metadata($adapter);

        $tableNames = $metadata->getTableNames();

        foreach ($tableNames as $tableName) {
            $code = '<?php' . $renderer->render($this->prepareViewModelForGenerateModel($baseNamespace, $metadata, $tableName));
            $fileName = $this->convertNameToClassName($tableName) . '.php';
            $this->writeStringToFile($fileName, $code);

            $code = '<?php' . $renderer->render($this->prepareViewModelForGenerateTable($baseNamespace, $metadata, $tableName));
            $fileName = $this->convertNameToClassName($tableName) . 'Table.php';
            $this->writeStringToFile($fileName, $code, 'Table');

            $code = '<?php' . $renderer->render($this->prepareViewModelForGenerateSelect($baseNamespace, $metadata, $tableName));
            $fileName = $this->convertNameToClassName($tableName) . 'Select.php';
            $this->writeStringToFile($fileName, $code, 'Select');

            $code = '<?php' . $renderer->render($this->prepareViewModelForGenerateForm($baseNamespace, $metadata, $tableName));
            $fileName = $this->convertNameToClassName($tableName) . 'Form.php';
            $this->writeStringToFile($fileName, $code, 'Form');
        }

        return "\n" . 'Models, tables, selects and forms were generated. Check PROJECT_ROOT/data/cache directory to view these files' . "\n";
    }

    private function writeStringToFile($fileName, $string, $subfolder = '')
    {
        umask(0);
        $path = __DIR__ . '/../../../../../data/cache/models';
        if (!file_exists($path)) {
            mkdir($path, 0777);
        }
        if ($subfolder != '') {
            $path .= '/' . $subfolder;
            if (!file_exists($path)) {
                mkdir($path, 0777);
            }
        }
        file_put_contents($path . '/'. $fileName, $string);
    }

    private function prepareViewModelForGenerateModel($baseNamespace, $metadata, $tableName)
    {
        $namespace = $baseNamespace . '\\' . 'Model';
        $className = $this->convertNameToClassName($tableName);
        $extendName = 'Model';
        $uses = array('Basic\Model\Model');
        $table = $metadata->getTable($tableName);
        $columns = $table->getColumns();
        $foreignKeys = array();
        foreach ($columns as $column) {
            $name = $column->getName();
            $cutName = preg_replace('/_id$/', '', $name);
            if ($name != $cutName) {
                $foreignClassName = $this->convertNameToClassName($cutName);
                $foreignKeys[] = array(
                    'name' => $cutName,
                    'class' => '\\' . $namespace . '\\' . $foreignClassName
                );
            }
        }

        $viewModel = new \Zend\View\Model\ViewModel();
        $viewModel->setTemplate('cli/index/model');
        $viewModel->setVariable('namespace', $namespace);
        $viewModel->setVariable('className', $className);
        $viewModel->setVariable('extendName', $extendName);
        $viewModel->setVariable('uses', $uses);
        $viewModel->setVariable('columns', $columns);
        $viewModel->setVariable('foreignKeys', $foreignKeys);

        return $viewModel;
    }

    private function prepareViewModelForGenerateTable($baseNamespace, $metadata, $tableName)
    {
        $namespace = $baseNamespace . '\Model';
        $className = $this->convertNameToClassName($tableName);
        $extendName = 'Table';
        $uses = array('Basic\Db\Table');

        $viewModel = new \Zend\View\Model\ViewModel();
        $viewModel->setTemplate('cli/index/table');
        $viewModel->setVariable('namespace', $namespace);
        $viewModel->setVariable('className', $className);
        $viewModel->setVariable('extendName', $extendName);
        $viewModel->setVariable('uses', $uses);
        $viewModel->setVariable('tableName', $tableName);

        return $viewModel;
    }

    private function prepareViewModelForGenerateSelect($baseNamespace, $metadata, $tableName)
    {
        $namespace = $baseNamespace . '\Model';
        $className = $this->convertNameToClassName($tableName);
        $extendName = 'Select';
        $uses = array('Basic\Db\Select');

        $viewModel = new \Zend\View\Model\ViewModel();
        $viewModel->setTemplate('cli/index/select');
        $viewModel->setVariable('namespace', $namespace);
        $viewModel->setVariable('className', $className);
        $viewModel->setVariable('extendName', $extendName);
        $viewModel->setVariable('uses', $uses);
        $viewModel->setVariable('tableName', $tableName);

        return $viewModel;
    }

    private function prepareViewModelForGenerateForm($baseNamespace, $metadata, $tableName)
    {
        $namespace = $baseNamespace . '\Form';
        $className = $this->convertNameToClassName($tableName);
        $extendName = 'Form';
        $uses = array('Basic\Form\Form');
        $table = $metadata->getTable($tableName);
        $columns = $table->getColumns();

        $viewModel = new \Zend\View\Model\ViewModel();
        $viewModel->setTemplate('cli/index/form');
        $viewModel->setVariable('namespace', $namespace);
        $viewModel->setVariable('className', $className);
        $viewModel->setVariable('extendName', $extendName);
        $viewModel->setVariable('uses', $uses);
        $viewModel->setVariable('tableName', $tableName);
        $viewModel->setVariable('columns', $columns);

        return $viewModel;
    }

    private function convertNameToClassName($name)
    {
        $buf = explode('_', $name);
        foreach ($buf as $k => $item) {
            $buf[$k] = ucfirst($item);
        }
        $className = implode('', $buf);

        return $className;
    }
}
